//1
CREATE TABLE airports
(   airport_code char(3) NOT NULL,		-- Код аэропорта
    airport_name text NOT NULL,		-- Название аэропорта
    city text  NOT NULL,			-- Город
    longitude float NOT NULL,			-- Координаты аэропорта: долгота
    latitude float NOT NULL,			-- Координаты аэропорта: широта 
    timezone text NOT NULL,			-- Часовой пояс
    PRIMARY KEY(airport_code)  
);

CREATE TABLE aircrafts
(   aircraft_code char(3) NOT NULL,	-- Код самолета, IATA
    model text NOT NULL,		-- Модель самолета
    range integer NOT NULL,		-- Максимальная дальность полета (км)
    CHECK(range > 0),
    PRIMARY KEY(aircraft_code)
);

CREATE TABLE seats
(   aircraft_code char(3) NOT NULL,			-- код самолета, IATA
    seat_no varchar(4) NOT NULL,			-- Номер места
    fare_condition varchar(10) NOT NULL,		-- Класс обслуживания
    CHECK(fare_condition IN ('Economy', 'Comfort', 'Business')),
    PRIMARY KEY(aircraft_code, seat_no),
    FOREIGN KEY(aircraft_code) 
           REFERENCES aircrafts(aircraft_code)
           ON DELETE CASCADE
);

CREATE TABLE bookings
( book_ref char(6) NOT NULL, 			-- Номер бронирования
  book_date timestamptz NOT NULL, 		-- Дата бронирования
  total_amount numeric(10,2) NOT NULL, 	-- Полная стоимость бронирования
  PRIMARY KEY(book_ref)
);

CREATE TABLE  tickets
( ticket_no   char(13) NOT NULL, 		-- Номер билета
  book_ref char(6) NOT NULL, 			-- Номер бронирования
  passenger_id varchar(20) NOT NULL,	-- ID пассажира
  passenger_name text NOT NULL,			-- Имя пассажира
  contact_data jsonb,     				-- Контактные данные пассажира
  PRIMARY KEY(ticket_no),
  FOREIGN KEY(book_ref) REFERENCES bookings(book_ref)
);

CREATE TABLE flights
(   flight_id serial NOT NULL,		-- Идентификатор рейса
    flight_no char(6) NOT NULL,		-- Номер рейса
    scheduled_departure timestamptz NOT NULL, 	-- Время вылета по расписанию
	scheduled_arrival timestamptz NOT NULL, 	-- Время прилета по расписанию
    departure_airport char(3) NOT NULL,			-- Аэропорт отправления 
    arrival_airport char(3) NOT NULL,			-- Аэропорт прибытия
    status   varchar(20) NOT NULL,				-- Статус
    aircraft_code  char(3) NOT NULL,			-- Код самолета, IATA
    actual_departure   timestamptz,				-- Фактическое время вылета
    actual_arrival timestamptz, 				-- Фактическое время прилета
    CHECK(actual_arrival > scheduled_departure),
    CHECK(status IN ('On Time', 'Delayed', 'Departed', 
                     'Arrives', 'Scheduled', 'Canceled')),
    CHECK(actual_arrival IS NULL OR
                 (actual_departure IS NOT NULL AND
                  actual_arrival  IS NOT NULL AND
                  actual_arrival >  actual_departure)),
     PRIMARY KEY(flight_id),
     UNIQUE(flight_no,  scheduled_departure),
     FOREIGN KEY(aircraft_code) REFERENCES  aircrafts(aircraft_code),
     FOREIGN KEY(arrival_airport) REFERENCES  airports(airport_code),
     FOREIGN KEY(departure_airport) REFERENCES  airports(airport_code)
);

CREATE TABLE   ticket_flights
(  ticket_no  char(13)  NOT NULL,			-- Номер билета
   flight_id   integer    NOT NULL,			-- Идентификатор рейса
   fare_conditions  varchar(10) NOT NULL,	-- Класс обслуживания
   amount  numeric(10,2) NOT NULL,			-- Стоимость перелета
   CHECK (amount >= 0),
   CHECK (fare_conditions IN ('Economy', 'Comfort', 'Business')),
   PRIMARY KEY (ticket_no, flight_id),
   FOREIGN KEY (flight_id) REFERENCES  flights (flight_id),
   FOREIGN KEY (ticket_no) REFERENCES  tickets (ticket_no)
);

CREATE TABLE  boarding_passes
(  ticket_no char(13) NOT NULL, 		-- Номер билета
   flight_id integer NOT NULL, 			-- Идентификатор рейса
   boarding_no integer NOT NULL,		-- Номер посадочного талона
   seat_no   varchar(4) NOT NULL, 		-- Номер места
   PRIMARY KEY (ticket_no, flight_id),
   UNIQUE (flight_id, boarding_no),
   UNIQUE  (flight_id,  seat_no),
   FOREIGN KEY (ticket_no, flight_id) 
             REFERENCES ticket_flights (ticket_no, flight_id)
);

INSERT INTO bookings (book_ref, book_date, total_amount)
VALUES      ('QWE123', '2020-04-27 17:40:00', 0);

INSERT INTO tickets (ticket_no, book_ref, passenger_id, passenger_name)
VALUES      ('000000000001', 'QWE123', '1749 051790', 'ALEKSANDR RADISHCHEV');

INSERT INTO airports (airport_code, airport_name, city, longitude, latitude, timezone)
VALUES      ('SVO', 'Шереметьево', 'Москва', 37.414589, 55.972642, 'Europe/Moscow'),
            ('ULV', 'Баратаевка', 'Ульяновск', 48.2267, 54.268299, 'Europe/Moscow');
			
INSERT INTO aircrafts (aircraft_code, model, range)
VALUES      ('773', 'Boeing 777-300', 11100),
            ('SU9', 'Sukhoi SuperJet-100', 3000);		

INSERT INTO flights (flight_id, flight_no, scheduled_departure, scheduled_arrival, departure_airport, arrival_airport, status, aircraft_code)
VALUES      (9720, 'PG0226', '2020-05-27 07:00:00', '2020-05-27 08:55:00', 'SVO', 'ULV', 'Scheduled', '773'),
            (6662, 'PG0227', '2020-05-29 12:00:00', '2020-05-29 14:20:00', 'ULV', 'SVO', 'Scheduled', 'SU9');			

INSERT INTO seats (aircraft_code, seat_no, fare_condition)
VALUES      ('SU9', '2A', 'Business'),
			('773', '1A', 'Business');

INSERT INTO ticket_flights (ticket_no, flight_id, fare_conditions, amount)
VALUES      ('000000000001', 9720, 'Business', 0),
            ('000000000001', 6662, 'Business', 0);

INSERT INTO boarding_passes (ticket_no, flight_id, boarding_no, seat_no)
VALUES      ('000000000001', 9720, 1, '1A');

//2
ALTER TABLE flights DROP CONSTRAINT flights_check1;

ALTER TABLE flights
    ADD CHECK(actual_arrival IS NULL OR
                 (actual_departure IS NOT NULL AND                   
                  actual_arrival > actual_departure)
);

INSERT INTO flights (flight_id, flight_no, scheduled_departure, scheduled_arrival, departure_airport, arrival_airport, status, aircraft_code, actual_departure, actual_arrival)
VALUES (1111, 'PG1111', '2020-04-27 07:00:00', '2020-04-27 10:00:00', 'SVO', 'ULV', 'Scheduled', '773', NULL, NULL);

INSERT INTO flights VALUES (1112, 'PG1112', '2020-04-27 07:00:00', '2020-04-27 10:00:00', 'SVO', 'ULV', 'Scheduled', '773', '2020-04-27 07:00:00', NULL);

// ошибка
INSERT INTO flights VALUES (1113, 'PG1113', '2020-04-27 07:00:00', '2020-04-27 10:00:00', 'SVO', 'ULV', 'Scheduled', '773', NULL, '2020-04-27 10:00:00'); 

INSERT INTO flights VALUES (1114, 'PG1114', '2020-04-27 07:00:00', '2020-04-27 10:00:00', 'SVO', 'ULV', 'Scheduled', '773', '2020-04-27 07:00:00', '2020-04-27 10:00:00');

// ошибка
INSERT INTO flights VALUES (1115, 'PG1115', '2020-04-27 07:00:00', '2020-04-27 10:00:00', 'SVO', 'ULV', 'Scheduled', '773', '2020-04-27 10:00:00', '2020-04-27 07:00:00');

Если допустимо присутствие фактического времени вылета без фактического времени прилета, то исходная проверка избыточна. Если же время вылета и прилета должны быть указаны оба в строке таблицы, то исходная проверка не избыточна.

//3
Предполагаю, что названия ограничений не изменятся.

ALTER TABLE flights RENAME TO flight;

//4
ALTER TABLE aircrafts ADD COLUMN specifications jsonb;

INSERT INTO aircrafts (aircraft_code, model, range)
VALUES ('320', 'Airbus A320-200', 10000);

UPDATE aircrafts
	SET specifications =
		'{ 	"crew": 2,
			"engines": { "type": "IAE V2500", "num": 2 }
		 }'::jsonb
  	WHERE aircraft_code = '320';
	
SELECT model, specifications
 	FROM aircrafts
	WHERE  aircraft_code =  '320';
	
SELECT model, specifications -> 'engines' AS engines
 	FROM aircrafts
	WHERE  aircraft_code =  '320';
	
//5
SELECT model, specifications  #> '{engines, type}' as engine_type
 	FROM aircrafts
	WHERE  aircraft_code =  '320';
	
//6
UPDATE tickets
	SET contact_data =
		'{ 	"telephone": "+79170889977",
			"email": "alex@mail.ru",
			"address": { "city": "Астрахань", "street": "Ул. Пушкина", "house": 2, "flat": 24 }
		 }'::jsonb
  	WHERE ticket_no = '000000000001';
	
SELECT ticket_no, passenger_name, 
	contact_data -> 'email' as email, 
	contact_data -> 'telephone' as tel, 
	contact_data -> 'address' as address FROM tickets;
	
ALTER TABLE airports ADD COLUMN specifications jsonb;

UPDATE airports
	SET specifications =
		'{ 	"aerodrome_class": "A",
			"ikao_category": "IIIA",
			"baggage_inspection_system": 
				{ 	"levels": 3, 
					"introscope": "MVT-HR",
					"tomograph": "Examiner (3DX 6500)",
					"scanners": ["ProVision-100", "SafeScout 100"]}
		 }'::jsonb
  	WHERE airport_code = 'SVO';

SELECT airport_code, airport_name,
	specifications -> 'aerodrome_class' as "Класс аэродрома", 
	specifications -> 'ikao_category' as "Категория ИКАО", 
	specifications #> '{baggage_inspection_system}' as "Система досмотра багажа"
	FROM airports WHERE airport_code = 'SVO';	
	