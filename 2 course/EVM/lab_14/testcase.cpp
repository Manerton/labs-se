#include "doctest.h"
#include "bitstring.h"
#include <iostream>



// -- непосредственно тесты -
TEST_CASE("Тесты класса BitString в doctest")
{
    BitString t;         // -- нулевой объект – нужен всем --
    SUBCASE("Тест создание и присваивание") // -- создание и присваивание --
    {
        BitString two;
        CHECK(t == two);
        BitString BS00 = 0b1101001;
        CHECK(BS00.toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101001");
        BitString BS01(0b1111111111111111111111111111111111111111111111111111111111111111,0b0000000000000000000000000000000000000000000000000000000000000111);
        CHECK(BS01.toString() == "11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000111");
        BitString BS1("00100110");
        CHECK(BS1.toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100110");
        BitString BS2 = BS1;
        CHECK(BS2.toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100110");
    }

    BitString BS1("00100110");
    BitString testBS1 = 0b110101;
    BitString testBS2 = 0b001001;
    BitString testBS3 = 0b100110;
    BitString testBS4("11010111100011101011110001011010110001100010000000000000000000011010111100011101011110001011010110001100010000000000000000000011");
    SUBCASE("Тест операции and (&)")
    {
        CHECK((BS1 & testBS1) == 0b100100);
        CHECK((BS1 & testBS1).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100100");
        CHECK((BS1 & testBS2).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        CHECK((BS1 & testBS3).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100110");
        CHECK((BS1 & testBS4).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010");
    }
    SUBCASE("Тест операции or (|)")
    {

        CHECK((BS1 | testBS1).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110111");
        CHECK((BS1 | testBS2).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101111");
        CHECK((BS1 | testBS3).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100110");
        CHECK((BS1 | testBS4).toString() == "11010111100011101011110001011010110001100010000000000000000000011010111100011101011110001011010110001100010000000000000000100111");

    }
    SUBCASE("Тест операции xor (^)")
    {
        CHECK((BS1 ^ testBS1).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010011");
        CHECK((BS1 ^ testBS2).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101111");
        CHECK((BS1 ^ testBS3).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        CHECK((BS1 ^ testBS4).toString() == "11010111100011101011110001011010110001100010000000000000000000011010111100011101011110001011010110001100010000000000000000100101");
    }
    SUBCASE("Тест операций сдвига")
    {
        CHECK((testBS1 << 3).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110101000");
        CHECK((testBS2 << 3).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001000");
        CHECK((testBS3 << 3).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100110000");
        CHECK((testBS4 << 3).toString() == "10111100011101011110001011010110001100010000000000000000000011010111100011101011110001011010110001100010000000000000000000011000");

        CHECK((testBS1 >> 4).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011");
        CHECK((testBS2 >> 4).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        CHECK((testBS3 >> 4).toString() == "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010");
        CHECK((testBS4 >> 4).toString() == "00001101011110001110101111000101101011000110001000000000000000000001101011110001110101111000101101011000110001000000000000000000");
    }
    SUBCASE("Тест операции not (~)")
    {
        CHECK((~testBS1).toString() == "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111001010");
        CHECK((~testBS2).toString() == "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110110");
        CHECK((~testBS3).toString() == "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011001");
        CHECK((~testBS4).toString() == "00101000011100010100001110100101001110011101111111111111111111100101000011100010100001110100101001110011101111111111111111111100");
    }
    SUBCASE("Тест сравнений")          // -- проверка сравнения --
    {
        CHECK(BS1 < testBS1);
        CHECK(!(BS1 >= testBS1));
        CHECK(!(BS1 > testBS1));
        CHECK(BS1 <= testBS1);
        CHECK(!(BS1 == testBS1));
        CHECK(BS1 != testBS1);

        CHECK(!(BS1 < testBS2));
        CHECK(BS1 >= testBS2);
        CHECK(BS1 > testBS2);
        CHECK(!(BS1 <= testBS2));
        CHECK(!(BS1 == testBS2));
        CHECK(BS1 != testBS2);

        CHECK(!(BS1 < testBS3));
        CHECK(BS1 >= testBS3);
        CHECK(!(BS1 > testBS3));
        CHECK(BS1 <= testBS3);
        CHECK(BS1 == testBS3);
        CHECK(!(BS1 != testBS3));

        CHECK(BS1 < testBS4);
        CHECK(!(BS1 >= testBS4));
        CHECK(!(BS1 > testBS4));
        CHECK(BS1 <= testBS4);
        CHECK(!(BS1 == testBS4));
        CHECK(BS1 != testBS4);
    }
    SUBCASE("Тест функции проверки на включение")
    {
        CHECK(!(is_included(BS1,testBS1)));
        CHECK(!(is_included(testBS1,BS1)));
        CHECK(!(is_included(BS1,testBS2)));
        CHECK(is_included(testBS2,BS1));
        CHECK(is_included(BS1,testBS3));
        CHECK(is_included(testBS3,BS1));
        CHECK(!(is_included(BS1,testBS4)));
        CHECK(!(is_included(testBS4,BS1)));
    }
    SUBCASE("Тест функции вычисления количества единичных битов")
    {
        CHECK(testBS1.count_of_SingleBit() == 4);
        CHECK(testBS2.count_of_SingleBit() == 2);
        CHECK(testBS3.count_of_SingleBit() == 3);
        CHECK(testBS4.count_of_SingleBit() == 50);
    }
}
