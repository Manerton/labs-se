#include <iostream>
#include "bitstring.h"

using namespace std;

int main()
{
    system("chcp 1251 > nul");
    cout << "Лабораторная работа №2. Вариант 7.\nАвтор: Катунин Сергей. ДИПРБ-21.\n" << endl;
    cout << "Условие: Создать класс BitString для работы с 128-битовыми строками."
            "Битовая строка должна быть представлена двумя полями типа unsigned long long. "
            "Должны быть реализованы все традиционные операции для работы с битами: and, or, xor, not. "
            "Реализовать сдвиг влево shiftLeft и сдвиг вправо shiftRight на заданное количество битов. "
            "Реализовать операцию вычисления количества единичных битов, операции сравнения по количеству единичных битов. "
            "Реализовать операцию проверки включения." << endl;
    try // ищем исключения, которые выбрасываются в блоке try и отправляем их для обработки в блок(и) catch
    {
        cout << "\n0. Создание битовой строки BS0 без инициализации (конструктор по умолчанию, т.е поля равны 0 и 0 соответственно) и последующий вывод строки BS0." << endl;
        BitString BS0;
        cout << BS0;
        cout << "\n1. Создание строки BS1, инициализация строкой \"00100110\" и последующий вывод строки BS1." << endl;
        BitString BS1("00100110");
        cout << BS1;
        cout << "\nРазмер класса в байтах: "; // в режиме pragma pack (1) будет такой же размер, так как все поля класса одного типа uint64_t
        cout << sizeof(BS1) << endl;
        cout << "\n2. Создание строки BS2, инициализация строкой введенной с клавиатуры." << endl;
        BitString BS2;
        cin >> BS2;
        cout << BS2;
        cout << "\n3. Создание строки BS3, инициализация объектом BS2 и последующий вывод BS3." << endl;
        BitString BS3 = BS2;
        cout << "BS3: " << BS3;
        cout << "\n4. Операция and с BS1 и BS2 (BS1 & BS2)." << endl;
        cout << BS1 << "&" << BS2 << "= " << (BS1 & BS2);
        cout << "\n5. Операция (BS3 &= BS1) и вывод BS3." << endl;
        cout << BS3 << " &= " << BS1 << "; BS3: " << (BS3 &= BS1);
        cout << "\n6. Операция or с BS1 и BS2 (BS1 | BS2)." << endl;
        cout << BS1 << "|" << BS2 << "= " << (BS1 | BS2);
        cout << "\n7. Операция (BS3 |= BS1)." << endl;
        cout << BS3 << " |= " << BS1 << "; BS3: " << (BS3 |= BS1);
        cout << "\n8. Операция xor с BS1 и BS2 (BS1 ^ BS2)." << endl;
        cout << BS1 << "^" << BS2 << "= " << (BS1 ^ BS2);
        cout << "\n9. Операция (BS3 ^= BS1)." << endl;
        cout << BS3 << " ^= " << BS1 << "; BS3: " << (BS3 ^= BS1);
        cout << "\n10. Операция not с BS2 (~BS2)." << endl;
        cout << "~" << BS2 << "= " << (~BS2);
        ~BS2;
        cout << "\n11. Операция shiftLeft с BS2 на 3 бита влево (BS2 << 3)." << endl;
        cout << BS2 << "<<3 = " << (BS2<<3);
        cout << "\n12. Операция (BS3 <<= 3)." << endl;
        cout << BS3 << " <<= 3" << "; BS3: " << (BS3 <<= 3);
        cout << "\n13. Операция shiftRight с BS2 на 4 бита право (BS2 >> 4)." << endl;
        cout << BS2 << ">>4 = " << (BS2>>4);
        cout << "\n14. Операция (BS3 >>= 4)." << endl;
        cout << BS3 << " >>= 4 " << "; BS3: " << (BS3 >>= 4);
        cout << "\n15. Количество единичных битов в BS1: " << (BS1.count_of_SingleBit());
        cout << "\n    Количество единичных битов в BS2: " << (BS2.count_of_SingleBit()) << endl;
        cout << "\nОперации сравнения по количеству единичных битов с BS1 и BS2:" << endl;
        cout << "BS1: " << BS1 << endl;
        cout << "BS2: " << BS2 << endl;
        cout << "\n16. Операция (BS1 < BS2) :" << (BS1<BS2);
        cout << "\n17. Операция (BS1 >= BS2) :" << (BS1>=BS2);
        cout << "\n18. Операция (BS1 > BS2) :" << (BS1>BS2);
        cout << "\n19. Операция (BS1 <= BS2) :" << (BS1<=BS2);
        cout << "\n20. Операция (BS1 == BS2) :" << (BS1==BS2);
        cout << "\n21. Операция (BS1 != BS2) :" << (BS1!=BS2);
        cout << "\n22. Операция проверки включения BS1 в BS2:" << (is_included(BS1,BS2));
        cout << "\n23. Операция проверки включения BS2 в BS1:" << (is_included(BS2,BS1));

    }
    catch (BitString::negative_int_exception) // обработка исключений типа const char*
    {
        cerr << "Ошибка: введенное число не может быть отрицательным." << endl;
    }
    catch (BitString::not_binary_exception) // обработка исключений типа const char*
    {
        cerr << "Ошибка: введенное число не является двоичным." << endl;
    }
    catch (BitString::overflow_exception) // обработка исключений типа const char*
    {
        cerr << "Ошибка: битовая строка не может быть больше чем 128 бита." << endl;
    }
    return 0;
}

