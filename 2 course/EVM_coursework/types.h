// "types.h"
// Используемые новые типы: cmd16_t, cmd32_t, cmd, data_t

#ifndef TYPES_H
#define TYPES_H

#include <cinttypes>

//union word_t // для того, чтобы легко разместить две 16-битные команды в 1 слове
//{
//    struct half_words_t {
//        uint16_t low;  // младшее полуслово
//        uint16_t high; // старшее полуслово
//    };

//    uint32_t w;
//    half_words_t hw;
//};

union cmd16_t {             // -- 16-битная команда -- //
    struct cmd16_struct {   // -- структура 16-битной команды -- //
        uint8_t t : 1;      // -- бит, определяющий длину команды, 0 - для 16-битной -- //
        uint8_t cop : 7;    // -- код операции -- //
        uint8_t r1 : 4;     // -- номер первого операнда-регистра -- //
        uint8_t r2 : 4;     // -- номер второго регистра -- //
    };

    cmd16_struct cmd;       // -- экземпляр структуры, описанной выше -- //
    uint16_t hw;            // -- команда как 16-битное беззнаковое число -- //
};

union cmd32_t {             // -- 32-битная команда -- //
    struct cmd32_struct {
        uint8_t t : 1;          // -- бит, определяющий длину команды, 1 - для 32-битной -- //
        uint8_t cop : 7;
        uint8_t r1 : 4;
        uint8_t r2 : 4;
        uint16_t address : 16;  // -- адрес, константа, смещение -- //
    };

    cmd32_struct cmd;
    uint32_t w;              // -- команда как 32-битное беззнаковое число -- //
};

union cmd   // -- команда в одном слове: либо одна 32-битная, либо две 16-битных -- //
{
    cmd32_t c32;
    cmd16_t c16[2];
};

union data_t {  // -- тип данных (размер 32-бита), использумый при загрузки в память -- //
    int32_t i;  // -- знаковое число -- //
    uint32_t u; // -- беззнаковое число -- //
    float f;    // -- дробное число -- //
    cmd c;      // -- команда (или две 16-битных команды) в одном слове -- //
};

#endif // TYPES_H
